"            oooo                          o8o              
"            `888                          `"'              
" oo.ooooo.   888  oooo  oooo   .oooooooo oooo  ooo. .oo.   
"  888' `88b  888  `888  `888  888' `88b  `888  `888P"Y88b  
"  888   888  888   888   888  888   888   888   888   888  
"  888   888  888   888   888  `88bod8P'   888   888   888  
"  888bod8P' o888o  `V88V"V8P' `8oooooo.  o888o o888o o888o 
"  888                         d"     YD                    
" o888o                        "Y88888P'                    
"                                                           

"
" Mru:
"
let MRU_Use_Alt_useopen = 1         "Open MRU by line number
let MRU_Window_Height   = 15
let MRU_Max_Entries     = 100
let MRU_Use_CursorLine  = 1
nnoremap <silent><Space>j :MRU<CR>

"
" Unite:
"
let g:unite_winwidth                   = 40
let g:unite_source_file_mru_limit      = 300
let g:unite_enable_start_insert        = 0            "off is zero
let g:unite_enable_split_vertically    = 0
let g:unite_source_history_yank_enable = 1            "enable history/yank
let g:unite_source_file_mru_filename_format  = ''
let g:unite_kind_jump_list_after_jump_scroll = 0

"nnoremap <silent><Space>j :Unite file_mru -direction=botright -toggle<CR>
nnoremap <silent><Space>o :Unite outline  -direction=botright -toggle<CR>

"
" Neocomplete (Neocomplcache)
"

if neobundle#is_installed('neocomplete')
	let g:neocomplete#enable_at_startup = 1
	let g:neocomplete#disable_auto_complete = 0
	let g:neocomplete#enable_ignore_case = 1
	let g:neocomplete#enable_smart_case = 1
	if !exists('g:neocomplete#keyword_patterns')
		let g:neocomplete#keyword_patterns = {}
	endif
	let g:neocomplete#keyword_patterns._ = '\h\w*'
elseif neobundle#is_installed('neocomplcache')
	let g:neocomplcache_enable_at_startup = 1
	let g:Neocomplcache_disable_auto_complete = 0
	let g:neocomplcache_enable_ignore_case = 1
	let g:neocomplcache_enable_smart_case = 1
	if !exists('g:neocomplcache_keyword_patterns')
		let g:neocomplcache_keyword_patterns = {}
	endif
	let g:neocomplcache_keyword_patterns._ = '\h\w*'
	let g:neocomplcache_enable_camel_case_completion = 1
	let g:neocomplcache_enable_underbar_completion = 1
endif
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"

highlight Pmenu      ctermbg=lightcyan ctermfg=black
highlight PmenuSel   ctermbg=blue      ctermfg=black
highlight PmenuSbari ctermbg=darkgray
highlight PmenuThumb ctermbg=lightgray

"
" Buftabs:
"
function! g:Date()
	return strftime("%Y/%m/%d %H:%M")
endfunction

set statusline=%{buftabs}%=%m\ %y%{'['.(&fenc!=''?&fenc:&enc).':'.&ff.']'}\ %4l/%4L,%3c\ %3p%%\ (%{g:Date()})

let w:buftabs_enabled         = 0
let g:buftabs_only_basename   = 1
let g:buftabs_in_statusline   = 1
let g:buftabs_marker_start    = "["
let g:buftabs_marker_end      = "]"
let g:buftabs_separator       = "#"
let g:buftabs_marker_modified = "+"
let g:buftabs_active_highlight_group = "Visual"
let w:original_statusline = matchstr(&statusline, "%=.*")

if &diff
	finish
endif

function! Buftabs_enable()
	let w:buftabs_enabled = 1
endfunction

let s:Pecho=''
function! s:Pecho(msg)
	if &ut!=1|let s:hold_ut=&ut|let &ut=1|en
	let s:Pecho=a:msg
	aug Pecho
		au CursorHold * if s:Pecho!=''|echo s:Pecho
					\|let s:Pecho=''|let &ut=s:hold_ut|en
				\|aug Pecho|exe 'au!'|aug END|aug! Pecho
	aug END
endf

function! Buftabs_show(deleted_buf)
	let l:i = 1
	let s:list = ''
	let l:start = 0
	let l:end = 0
	if ! exists("w:from") 
		let w:from = 0
	endif

	if ! exists("w:buftabs_enabled")
	endfunction

"
" Splash:
"
""let g:loaded_splash = 1   "(on=1 / off=0)
let s:vim_intro = $HOME . "/.vim/bundle/vim-splash/sample/intro"
if !isdirectory(s:vim_intro)
	call system('$HOME/.vim/bundle/vim-splash/sample/')
	call system('git clone https://gist.github.com/OrgaChem/7630711 intro')
endif
let g:splash#path = expand(s:vim_intro . '/vim_intro.txt')

"
" Anzu:
"
nmap n <Plug>(anzu-n-with-echo)
nmap N <Plug>(anzu-N-with-echo)
nmap * <Plug>(anzu-star-with-echo)
nmap # <Plug>(anzu-sharp-with-echo)
