#!/bin/bash

trap 'e_error "$0: DANGER: CLOSING..."; exit 1' INT ERR
set -e
set -u

# Display Logo!
# Regardless of execution or non-execution
#
cat <<-'EOT'

    | |     | |  / _(_) |           
  __| | ___ | |_| |_ _| | ___  ___  
 / _` |/ _ \| __|  _| | |/ _ \/ __| 
| (_| | (_) | |_| | | | |  __/\__ \ 
 \__,_|\___/ \__|_| |_|_|\___||___/ 

*** WHAT'S INSIDE? ***
  1. Download https://github.com/b4b4r07/dotfiles
  2. Symlinking to your home directory
  3. (Optional): Set following some config files within etc/

See the README for documentation.
https://github.com/b4b4r07/dotfiles

Copyright (c) 2014 "BABAROT" aka @b4b4r07
Licensed under the MIT license.

EOT

export DOTFILES=~/.dotfiles

# Logging stuff.
function e_newline() { echo -en "\n"; }
function e_header()  { echo -e "\n\033[1m$*\033[0m"; }
function e_success() { echo -e " \033[1;32m✔\033[0m  $*"; }
function e_error()   { echo -e " \033[1;31m✖\033[0m  $*" 1>&2; }
function e_arrow()   { echo -e " \033[1;34m➜\033[0m  $*"; }
function is_exist()  { type "$1" >/dev/null 2>&1; return $?; }

#
# $ make install
#
function make_install()
{
    local -i i=1
    local file files=($(echo $DOTFILES/etc/init/{osx/,}*.sh))
    # No files? abort.
    if (( ${#files[@]:-} == 0 )); then return; fi
    for file in "${files[@]}"; do
        e_header "$i/${#files[@]:-} $(basename $file): running..."
        if bash "$file"; then
            e_success "DONE."
        else
            e_error "ERROR!!"
        fi
        ((i++))
    done
}

function dotfiles()
{
    if [ -d "$DOTFILES" ]; then
        if is_exist 'git'; then
            e_arrow "Change to the $DOTFILES directory"
            cd $DOTFILES

            e_header "Updating..."
            make update
            e_success 'DONE.'
        elif is_exist 'curl'; then
            #e_header 'Please re-install after executing "make clean"'
            e_arrow "Change to the $DOTFILES directory"
            cd $DOTFILES

            e_arrow "Cleaning dotfiles..."
            make clean

            e_arrow "Re-installing and deploying..."
            cd /tmp
            curl -fsSL -o dotfiles.zip https://github.com/b4b4r07/dotfiles/archive/master.zip
            unzip -oq dotfiles.zip
            mv dotfiles-master $DOTFILES
            cd $DOTFILES
            make deploy
            e_success 'DONE.'
        else
            e_error 'Require: git or curl'
            return 1
        fi
    else
        e_header 'Downloading dotfiles...'
        if is_exist 'git'; then
            # --recursive equals to ...
            # git submodule init
            # git submodule update
            git clone --recursive https://github.com/b4b4r07/dotfiles.git $DOTFILES
        elif is_exist 'curl'; then
            cd /tmp
            curl -fsSL -o dotfiles.zip https://github.com/b4b4r07/dotfiles/archive/master.zip
            unzip -oq dotfiles.zip
            mv dotfiles-master $DOTFILES
        else
            e_error 'Require: git or curl'
            return 1
        fi
        e_success 'Done'

        cd $DOTFILES
        e_header 'Deploying dotfiles...'
        make deploy
        e_success 'Done'

        if [[ "${1:-}" == "install" ]]; then
            e_header 'Installing...'
            #make install
            make_install
        fi

        # Restart shell
        exec "${SHELL:-/bin/zsh}"
    fi
}

#
# ~~~ MAIN PART ~~~
#
# A SAFETY system
# Note: This script is designed to be run from a command line shell.
if [[ "$0" =~ $(basename "${BASH_SOURCE:-}") ]]; then
    e_error 'WARNING!!'
    e_error 'You should NOT run directly from the command line'
    e_error 'For more info, see https://github.com/b4b4r07/dotfiles'
    e_newline

    # Push off the safety catch
    if [[ "${1:-}" != "directly" ]]; then
        exit 1
    fi
fi

dotfiles "$@"
source $(cd "$(dirname "${BASH_SOURCE}")" && pwd)/$(basename $0)
e_success 'All done'
