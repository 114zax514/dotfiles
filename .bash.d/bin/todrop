#!/bin/bash
#
# @(#) Of Dropbox shell script
#

. ~/.bash.d/lib/general.func
. ~/.bash.d/lib/variable.def

trap 'bg_clean' EXIT INT

PROGNAME=$(basename $0)
DROPPATH=~/Dropbox/etc

usage() {
	echo "Usage: $PROGNAME [OPTION] files ..."
	echo "  Transfer files to my Dropbox dir."
	echo "  Supporting stdin (pipe)."
	echo
	echo "Options:"
	echo "  -h, --help        display this help and exit"
	echo "  -c, --copy        change means of transfer method (default to mv)"
	echo "  -f, --force       ignore nonexistant files, never prompt"
	echo "  -p, --path <path> change mv(cp) path"
	echo "                    + no -p option       -> ~/Dropbox/etc"
	echo "                    + no arg ( only -p ) -> ~/Dropbox"
	echo "                    + a arg  (-p <path>) -> ~/Dropbox/<path>"
	echo "  -a, --append PATH change mv(cp) path"
	echo "  -t, --test        archives testing"
	echo "                    -a, -p cannot use at the same time"
	echo "  -v, --verbose     verbose"
	echo "      --version     display version"
	echo
	echo "Example:"
	echo "  bash-3.2$ $PROGNAME myfile.c"
	echo "  --> Move myfile.c to dropbox."
	echo "  bash-3.2$ echo /home/tester/myfile2.sh | $PROGNAME -c"
	echo "  --> Copy myfile2.sh to dropbox."
	echo
	echo "This script was developed by b4b4r07."
	exit 1
}

if [ ! -d ~/Dropbox ]; then
	echo "This script need Dropbox directory." 1>&2
	echo "You should install it" 1>&2
	exit 1
fi
[ -e $DROPPATH ] || mkdir -p $DROPPATH

for OPT in "$@"
do
	case "$OPT" in
		'-h'|'--help' )
			usage
			exit 1
			;;
		'--version' )
			echo $VERSION
			exit 1
			;;
		'-c'|'--copy' )
			METHOD='cp -R'
			shift 1
			;;
		'-f'|'--force' )
			OPTION_F='-f'
			shift 1
			;;
		'-v'|'--verbose' )
			OPTION_V='-v'
			shift 1
			;;
		'-p'|'--path' )
			if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
				DROPPATH=~/Dropbox
				shift 1
			else	
				if [ -d ~/Dropbox/"$2" ]; then
					DROPPATH=~/Dropbox/"$2"
					shift 2
				else
					echo "$2: Not a directory." 1>&2
					exit 1
				fi
			fi
			;;
		'-a'|'--append' )
			if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
				echo "$PROGNAME: option requires an argument -- $1" 1>&2
				exit 1
			fi
			APPEND="$2"
			shift 2
			;;
		'-t'|'--test' )
			OPTION_T=1
			shift 1
			;;
		'--'|'-' )
			shift 1
			param+=( "$@" )
			break
			;;
		-*)
			echo "$PROGNAME: illegal option -- '$(echo $OPT | sed 's/^-*//')'" 1>&2
			exit 1
			;;
		*)
			if [[ ! -z "$1" ]] && [[ ! "$1" =~ ^-+ ]]; then
				#param=( ${param[@]} "$1" )
				param+=( "$1" )
				shift 1
			fi
			;;
	esac
done

archiving() {
	DIR=~/Dropbox/etc/archives/$Y/$m/$d
	[ ! -d $DIR ] && mkdir -p $DIR
	for f in ${param[@]}; do
		mv -f $f $f.${H}_${M}_${S}
		${METHOD:-mv} ${OPTION_F:--i} ${OPTION_V} $_ $DIR
	done
}

if in_pipe; then
	bg_rotation_bar
	while read line; do
		[ -n "$OPTION_T" ] && { archiving; exit 0; }
		${METHOD:-mv} ${OPTION_F:--i} ${OPTION_V} "${line/*$HOME/$HOME}" ${DROPPATH}
	done 2>/dev/null
	[ ! -z $! ] && kill $!
	exit 0
else
	##########
	## MAIN ##
	##########
	if [ -z "$param" ]; then
		echo "$PROGNAME: too few arguments" 1>&2
		echo "Try '$PROGNAME --help' for more information." 1>&2
		exit 1
	fi
	[ -n "$OPTION_T" ] && { archiving; exit 0; }

	[ ! -z "$APPEND" ] && cp "${param[@]}" $APPEND
	${METHOD:-mv} ${OPTION_F:--i} ${OPTION_V} "${param[@]}" ${DROPPATH}
fi
