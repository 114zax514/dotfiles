# Bash - Bourne-Again Shell
#
# @(#) stdlibrary.func ver.0.1.0 2013.07.27
#
# Usage:
#   . ~/.bash.d/lib/stdlibrary.func
#   function "$1"
#
# Description:
#   A libraryrary is a collection of implementations of behavior,
#   written in terms of a language, that has a well-defined
#   interface by which the behavior is invoked.
#   In particular by this program, dealing with data structure.
#
###########################################################################

push() {
	S_COUNT=${#S[@]}
	if [ ${#S[@]} -lt ${S_MAX:=10} ]; then
		S=("${S[@]}" "$1")
		[ ${#S[@]} -eq $S_MAX ] && let ++S_MAX
		return 0
	else
		echo "A job is full."
		return 1
	fi
}

pop() {
	if [ "${#S[@]}" -gt 0 ]; then
		echo ${S[S_COUNT]}
		unset S[S_COUNT]
		let S_COUNT--
		return 0
	else
		S_COUNT=${#S[@]}
		echo "A job is empty."
		return 1
	fi
}

print_stack() {
	echo ${S[@]}
}

reset_stack() {
	S=()
}

enqueue() {
	Q_COUNT=0
	if [ ${#Q[@]} -lt ${Q_MAX:=10} ]; then
		Q=("${Q[@]}" "$1")
		[ ${#Q[@]} -eq $Q_MAX ] && let ++Q_MAX
		return 0
	else
		echo "A job is full."
		return 1
	fi
}

dequeue() {
	if [ "${#Q[@]}" -gt 0 ]; then
		echo ${Q[Q_COUNT]}
		unset Q[Q_COUNT]
		let ++Q_COUNT
		return 0
	else
		Q_COUNT=0
		echo "A job is empty."
		return 1
	fi
}

print_queue() {
	echo ${Q[@]}
}

reset_queue() {
	Q=()
}
